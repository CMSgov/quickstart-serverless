name: Deploy Branch

on:
  push:
    branches:
      - "*"
      - "dependabot/**"
      - "!skipci*"
      - "!master" # TODO this should be conditional if auto-promotion is enabled

permissions:
  id-token: write
  contents: read
  actions: read

jobs:
  check-deploy-strategy:
    uses: ./.github/workflows/check-deploy-strategy.yml
    secrets:
      USE_AUTO_PROMOTION: ${{ secrets.USE_AUTO_PROMOTION }}

  # each subsequent job should be configured to need this job to effectively gate on the deploy strategy
  gate-on-deploy-strategy:
    needs: [check-deploy-strategy]
    runs-on: ubuntu-latest
    if: ${{ needs.check-deploy-strategy.outputs.deploy-strategy == 'branch-based' }}
    steps:
      - name: confirm deploy strategy
        run: echo "Using the branch-based deploy strategy"

  set-branch-name:
    needs: [gate-on-deploy-strategy]
    name: set branch name
    runs-on: ubuntu-latest
    outputs:
      branch-name: ${{ steps.set-branch-name.outputs.branch-name }}
      upcased-branch-name: ${{ steps.upcased.outputs.branch-name }}
    steps:
      - name: check out repository
        uses: actions/checkout@v3

      - name: set branch name
        id: set-branch-name
        run: |
          if [[ "$GITHUB_REF" =~ ^refs/heads/dependabot/.* ]]; then # Dependabot builds very long branch names.  This is a switch to make it shorter.
            echo "::set-output name=branch-name::`echo ${GITHUB_REF#refs/heads/} | md5sum | head -c 10 | sed 's/^/x/'`"
          else
            echo "::set-output name=branch-name::${GITHUB_REF#refs/heads/}"
          fi

      - name: validate branch name
        run: ./.github/scripts/branch_name_validation.sh ${{ secrets.STAGE_PREFIX }}${{ steps.set-branch-name.outputs.branch-name }}

      - name: upcase branch name
        id: string-case
        uses: ASzc/change-string-case-action@v2
        with:
          string: ${{ steps.set-branch-name.outputs.branch-name }}

      - name: output upcased branch name
        id: upcased
        run: echo "::set-output name=upcased-branch-name::${{ steps.string-case.outputs.uppercase }}"

  unit-tests:
    needs: [gate-on-deploy-strategy]
    name: run unit tests
    uses: ./.github/workflows/unit-test.yml
    secrets:
      CODE_CLIMATE_ID: ${{ secrets.CODE_CLIMATE_ID}}

  deploy-branch:
    needs: [set-branch-name, unit-tests, gate-on-deploy-strategy]
    name: deploy branch
    runs-on: ubuntu-latest
    env:
      SLS_DEPRECATION_DISABLE: "*" # Turn off deprecation warnings in the pipeline
    steps:
      - name: check out repository
        uses: actions/checkout@v3

      - name: set up environment
        uses: ./.github/actions/set-up-env
        with:
          oidc-role: ${{ secrets.AWS_OIDC_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          branch-specific-oidc-role: ${{ secrets[format('{0}_{1}', needs.set-branch-name.outputs.upcased-branch-name, 'AWS_OIDC_ROLE_TO_ASSUME')] }}
          branch-specific-aws-region: ${{ secrets[format('{0}_{1}', needs.set-branch-name.outputs.upcased-branch-name, 'AWS_DEFAULT_REGION')] }}

      - name: deploy branch
        run: |
          # When deploying multiple copies of this quickstart to the same AWS Account (not ideal), a prefix helps prevent stepping on each other.
          # This can optionally be set as an GitHub Actions Secret
          ./scripts/deploy.sh ${{ format('{0}{1}', secrets.STAGE_PREFIX, needs.set-branch-name.outputs.branch-name) }}

      - name: check for slack webhook secret
        id: slack
        uses: ./.github/actions/has-secret
        with:
          secret-to-check: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: slack notification
        uses: rtCamp/action-slack-notify@v2
        if: ${{ steps.slack.outputs.has-secret == true && contains(fromJson('["master", "val", "production"]'), needs.set-branch-name.outputs.branch-name) && failure() }}
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: Deploy Alerts
          SLACK_ICON_EMOJI: ":bell:"
          SLACK_COLOR: ${{job.status}}
          SLACK_FOOTER: ""
          MSG_MINIMAL: actions url,commit,ref

  cypress-tests:
    needs: [set-branch-name, unit-tests, deploy-branch, gate-on-deploy-strategy]
    name: cypress tests
    uses: ./.github/workflows/cypress-for-env.yml
    with:
      env: ${{ needs.set-branch-name.outputs.branch-name }}
    secrets: inherit

  a11y-tests:
    name: A11y Tests
    needs: [set-branch-name, unit-tests, deploy-branch, gate-on-deploy-strategy]
    if: ${{ github.ref != 'refs/heads/production' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        containers: [homePage]
    steps:
      - name: check out repository
        uses: actions/checkout@v3

      - name: set up environment
        uses: ./.github/actions/set-up-env
        with:
          oidc-role: ${{ secrets.AWS_OIDC_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          branch-specific-oidc-role: ${{ secrets[format('{0}_{1}', needs.set-branch-name.outputs.upcased-branch-name, 'AWS_OIDC_ROLE_TO_ASSUME')] }}
          branch-specific-aws-region: ${{ secrets[format('{0}_{1}', needs.set-branch-name.outputs.upcased-branch-name, 'AWS_DEFAULT_REGION')] }}

      - name: Endpoint
        run: |
          pushd services
          export APPLICATION_ENDPOINT=`./output.sh ui ApplicationEndpointUrl ${{ format('{0}{1}', secrets.STAGE_PREFIX, needs.set-branch-name.outputs.branch-name) }}`
          echo "APPLICATION_ENDPOINT=$APPLICATION_ENDPOINT" >> $GITHUB_ENV
          echo "Application endpoint: $APPLICATION_ENDPOINT"
          popd

      - name: Check Project A11y
        uses: cypress-io/github-action@v2.11.7
        with:
          working-directory: tests/cypress
          spec: integration/a11y/${{ matrix.containers }}.spec.js
          browser: chrome
          headless: true
          config: baseUrl=${{ env.APPLICATION_ENDPOINT }}
